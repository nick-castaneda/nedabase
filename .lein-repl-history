                       :purchase/subcategory purchase-subcategory])))
(defn create-entry
  "Creates an entry in the nedabase"
  [entry-text]
  @(d/transact conn [{:db/id #db/id[:db.part/user]
                      :entry/text entry-text}]))
exit
(in-ns 'delta.parsing-functions)
(post-entry split-entry)
example-entry
(in-ns 'nedabase.parsing-functions)
example-entry
(post-entry split-entry)
(defn post-entry
  ""
  [entry]
  (d/create-entry entry)
  (check-entry (str/split entry #" ")))
(post-entry split-entry)
(post-entry example-entry)
(in-ns 'nedabase.datomic-functions)
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry]
  (((into []
    (d/q '[:find ?e
           :in $ ?text
           :where [?e :entity/text ?text]]
      (d/db (d/connect uri)) text)) 0) 0))
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  (((into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entity/text ?entry-text]]
      (d/db (d/connect uri)) entry-text)) 0) 0))
(get-entry-from-text "hi")
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  (((into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text)) 0) 0))
(get-entry-from-text "hi")
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  ; (((into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text))
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  ; (((into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text))
(get-entry-from-text "hi")
(get-entry-from-text "fhladdsf $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  ; (((into []
  (into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text))
  )
(get-entry-from-text "fhladdsf $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  ; (((into []
  (0 (into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text))
  ))
(get-entry-from-text "fhladdsf $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  ; (((into []
  ((into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text))
  0))
(get-entry-from-text "fhladdsf $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  ; (((into []
  (((into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text))
  0) 0))
(get-entry-from-text "fhladdsf $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
(defn get-entry-from-text
  "Takes in entity text and returns entity eid"
  [entry-text]
  (((into []
    (d/q '[:find ?e
           :in $ ?entry-text
           :where [?e :entry/text ?entry-text]]
      (d/db (d/connect uri)) entry-text)) 0) 0))
(get-entry-from-text "fhladdsf $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
exit
(in-ns 'nedabase.datomic-functions)
(in-ns 'nedabase.parsing-functions)
example-entry
(post-entry)
(post-entry example-entry)
(defn post-entry
  ""
  [entry-text]
  (d/create-entry entry-text)
  (println (d/get-entry-from-text entry-text))
  (check-entry (str/split entry-text #" ") (d/get-entry-from-text entry-text)))
(post-entry example-entry)
(def example-entry "test test $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
(post-entry example-entry)
(defn purchase-function
  ""
  [entry entry-eid]
  (if (>= (count entry) 2)
    (let [purch-vect (into [] entry)]
      (cond
        ;; Make database function
        (re-matches #"^([0-9]|[.])*$" (purch-vect 1))
          (d/create-purchase entry-eid (purch-vect 0) (purch-vect 1))
        ;; Make database function
        (re-matches #"^([0-9]|[.])*$" (purch-vect 2))
          (d/create-purchase entry-eid (purch-vect 0) (purch-vect 2) (purch-vect 1))
        :else "Error! No cash amount!"))
    (println "Error! Too short")))
(post-entry example-entry)
(defn purchase-function
  ""
  [entry entry-eid]
  (if (>= (count entry) 2)
    (let [purch-vect (into [] entry)]
      (cond
        ;; Make database function
        (re-matches #"^([0-9]|[.])*$" (purch-vect 1))
          (println entry-eid (purch-vect 0) (purch-vect 1))
        ;; Make database function
        (re-matches #"^([0-9]|[.])*$" (purch-vect 2))
          (println entry-eid (purch-vect 0) (purch-vect 2) (purch-vect 1))
        :else "Error! No cash amount!"))
    (println "Error! Too short")))
(post-entry example-entry)
exit
(in-ns 'nedabase.parsing-functions)
example-entry
(def example-entry "supertest $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
example-entry
(post-entry example-entry)
(defn purchase-function
  ""
  [entry entry-eid]
  (if (>= (count entry) 2)
    (let [purch-vect (into [] entry)]
      (cond
        ;; Make database function
        (re-matches #"^([0-9]|[.])*$" (purch-vect 1))
          (d/create-purchase entry-eid (purch-vect 0) (read-string (purch-vect 1)))
        ;; Make database function
        (re-matches #"^([0-9]|[.])*$" (purch-vect 2))
          (d/create-purchase entry-eid (purch-vect 0) (read-string (purch-vect 2)) (purch-vect 1))
        :else "Error! No cash amount!"))
    (println "Error! Too short")))
(def example-entry "supertestsuper $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf $klsdff 2939.2 dfalklnlas $fds")
(post-entry example-entry)
(in-ns 'nedabase.datomic-functions)
(defn get-all-entities
  "Returns all entities in the database"
  []
  (d/q '[:find ?e
         :where [?e :db/id ?eid]]))
(get-all-entities)
(defn get-all-entities
  "Returns all entities in the database"
  []
  (d/q '[:find ?e
         :where [?e :db/id ?eid]]
         (d/db (d/connect uri))
    (d/db (d/connect uri))))
(get-all-entities)
(defn get-all-entities
  "Returns all entities in the database"
  []
  (d/q '[:find ?e
         :where (or [?e :entry/text ?text]
                    [?e :purchase/category ?category])]
    (d/db (d/connect uri))))
(get-all-entities)
(defn get-all-entities
  "Returns all entities in the database"
  []
  (d/q '[:find ?e
         :where (or [?e :entry/text ?anything]
                    [?e :purchase/category ?anything])]
    (d/db (d/connect uri))))
(get-all-entities)
(defn clear-database
  "Clears database"
  []
  (let [entities (d/get-all-entities)]
    (map println entities)))
exit
(in-ns 'nedabase.seed)
(clear-database)
clear-database
(defn clear-database
  "Clears database"
  []
  (let [entities (d/get-all-entities)]
    (map println entities)))
exit
(in-ns 'nedabase.seed)
(clear-database)
(defn clear-database
  "Clears database"
  []
  (let [entities (d/get-all-entities)]
    (map #(str "Hello " (% 0) ) entities)))
(clear-database)
(defn clear-database
  "Clears database"
  []
  (let [entities (d/get-all-entities)]
00000))))))))))
(defn clear-database
  "Clears database"
  []
  (let [entities (d/get-all-entities)]
    (map #(d/delete-entity (% 0) ) entities)))
(clear-database)
(defn seed-examples
  ""
  []
  (map p/post-entry seed-examples))
exit
(in-ns 'nedabase.seed)
(seed-examples)
(defn seed-examples
  ""
  []
  (map p/post-entry example-entries))
(seed-examples)
(in-ns 'nedabase.datomic)
uri
@(d/transact conn [{:db/id :purchase/cost
:db/valueType :db.type/long}])
@(d/transact conn [{:db/id :purchase/cost
:db/valueType :db.type/long
:db.alter/_attribute :db.part/db}])
(in-ns 'delta.seed)
(clear-database)
(in-ns 'nedabase.seed)
(clear-database)
@(d/transact conn [{:db/id :purchase/cost
:db/valueType :db.type/long
:db.alter/_attribute :db.part/db}])
(in-ns 'nedabase.datomic)
@(d/transact conn [{:db/id :purchase/cost
:db/valueType :db.type/long
:db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :purchase/cost
:db/ident :oldSchema/cost
:db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :purchase/cost
:db/ident :purchase/cost
   :db/valueType :db.type/long
   :db/cardinality :db.cardinality/one
   :db/doc "The cost of a purchase"
   :db.install/_attribute :db.part/db}
])
@(d/transact conn [{:db/id :oldSchema/cost
:db/ident :oldSchema/purchcost
:db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :purchase/cost
:db/ident :purchase/cost
   :db/valueType :db.type/long
   :db/cardinality :db.cardinality/one
   :db/doc "The cost of a purchase"
   :db.install/_attribute :db.part/db}
])
@(d/transact conn [{:db/id :purchase/amount
0000)))))
@(d/transact conn [{:db/id #db/id[:db.part/db]
   :db/ident :purchase/cost
   :db/valueType :db.type/long
   :db/cardinality :db.cardinality/one
   :db/doc "The cost of a purchase"
   :db.install/_attribute :db.part/db}])
(in-ns 'nedabase.seed)
(seed-examples)
(clear-database)
@(d/transact conn [{:db/id :purchase/cost
   :db/ident :oldSchema/purchcost2
:db.alter/_attribute :db.part/db}])
(in-ns 'nedabase.datomic)
@(d/transact conn [{:db/id :purchase/cost
   :db/ident :oldSchema/purchcost2
:db.alter/_attribute :db.part/db}])
@(d/transact conn [
{:db/id #db/id[:db.part/db]
   :db/ident :purchase/cost
   :db/valueType :db.type/string
   :db/cardinality :db.cardinality/one
   :db/doc "The cost of a purchase"
   :db.install/_attribute :db.part/db}])
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
exit
(in-ns 'nedabase.datomic)
@(d/transact conn [{:db/id :purchase/cost
   :db/ident :oldSchema/purchcost3
:db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :oldSchema/purchcost
   :db/ident :purchase/cost
:db.alter/_attribute :db.part/db}])
exit
5
5 * 1.00
(* 5 1.00)
(* 5 1.0)
exit
(in-ns 'nedabase.seed)
example-entries
(seed-examples)
(in-ns 'nedabase.parsing)
(make-float 23)
(make-float "23")
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
(clear-database)
(in-ns 'nedabase.parsing)
(defn make-float
  "Helper function to turn a number-string into a floating point value"
  [cost-string]
  (let [cost-number (read-string cost-string)]
    (if (float? cost-number)
      cost-number
      (println (* cost-number 1.0)))))
(make-float "23")
(in-ns 'nedabase.seed)
(seed-examples)
(defn make-float
  "Helper function to turn a number-string into a floating point value"
  [cost-string]
  (if (re-matches #"^[^\.]*$" cost-string)
    (read-string (str cost-string ".00"))
    (read-string cost-string)))
(make-float "3.23")
(make-float "3")
exit
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
(clear-database)
(seed-examples)
exit
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
(in-ns 'delta.datomic)
uri
(in-ns 'nedabase.datomic)
uri
@(d/transact conn [
{:db/id :oldSchema/purchcost3
:db/ident :oldSchema/purchcost1
:db.alter/_attribute :db.part/db}])
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
(in-ns 'nedabase.datomic)
(defn create-purchase
  "Creates a purchase in the nedabase"
  ([related-entry purchase-category purchase-cost]
    @(d/transact conn [{:db/id #db/id[:db.part/user]
                        :purchase/entry related-entry
                        :purchase/category purchase-category
                        :purchase/cost purchase-cost}]))
  ([related-entry purchase-category purchase-cost purchase-subcategory]
    @(d/transact conn [{:db/id #db/id[:db.part/user]
                        :purchase/entry related-entry
                        :purchase/category purchase-category
                        :purchase/cost purchase-cost
                        :purchase/subcategory purchase-subcategory}])))
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
(in-ns 'nedabase.datomic)
@(d/transact conn [
              #_=> {:db/id :purchase/cost
:db/ident :purchase/price
:db.alter/_attribute :db.part/db}])
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
(in-ns 'nedabase.datomic)
@(d/transact conn [
              #_=> {:db/id :purchase/price
:db/ident :purchase/price
))))))
@(d/transact conn [
              #_=> {:db/id :purchase/price
:db/ident :oldSchema/cost2
:db.alter/_attribute :db.part/db}])
exit
(in-ns 'nedabase.seed
)
(clear-database)
(seed-examples)
(clear-database)
exit
(in-ns 'nedabase.seed)
(seed-examples)
(in-ns 'nedabase.datomic)
@(d/transact conn [{:db/id :purchase/cost
:db/ident :oldSchema/purchcost4
db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :purchase/cost
db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :purchase/cost
:db/ident :oldSchema/purchcost4
db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :purchase/cost
:db/ident :oldSchema/purchcost4
:db.alter/_attribute :db.part/db}])
@(d/transact conn [{:db/id :oldSchema/purchcost
:db/ident :oldSchema/purchcost1
:db.alter/_attribute :db.part/db}])
@(d/transact conn [  {:db/id #db/id[:db.part/db]
   :db/ident :purchase/Cost
   :db/valueType :db.type/float
   :db/cardinality :db.cardinality/one
   :db/doc "The cost of a purchase"
   :db.install/_attribute :db.part/db}])
exit
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
i
(in-ns 'nedabase.datomic
)
create-purchase
(defn create-purchase
  "Creates a purchase in the nedabase"
  ([related-entry purchase-category purchase-cost]
    @(d/transact conn [{:db/id #db/id[:db.part/user]
                        :purchase/entry related-entry
                        :purchase/category purchase-category
                        :purchase/Cost purchase-cost}]))
  ([related-entry purchase-category purchase-cost purchase-subcategory]
    @(d/transact conn [{:db/id #db/id[:db.part/user]
                        :purchase/entry related-entry
                        :purchase/category purchase-category
                        :purchase/Cost purchase-cost
                        :purchase/subcategory purchase-subcategory}])))
(in-ns 'nedabase.parse)
(post-entry "supertest $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf dfalklnlas $fds")
(in-ns 'nedabase.parsing)
(post-entry "supertest $sniooibnwef nosdfsdofni 32.32 sdafdsafdsf fdfdsafdsf dfalklnlas $fds")
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
exit
(in-ns nedabase.seed)
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
exi
exit
(in-ns 'nedabase.seed)
(clear-database)
(seed-examples)
exit
(in-ns 'nedabase.parsing)
(check-entry "Nick Is chill")
(check-entry "Nick Is chill" 34234324234234)
(check-entry "Nick Is chill" "34234324234234")
exit
